// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockAudioProcessor creates a new instance of MockAudioProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAudioProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAudioProcessor {
	mock := &MockAudioProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAudioProcessor is an autogenerated mock type for the AudioProcessor type
type MockAudioProcessor struct {
	mock.Mock
}

type MockAudioProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAudioProcessor) EXPECT() *MockAudioProcessor_Expecter {
	return &MockAudioProcessor_Expecter{mock: &_m.Mock}
}

// Process provides a mock function for the type MockAudioProcessor
func (_mock *MockAudioProcessor) Process(audioSample []float32) {
	_mock.Called(audioSample)
	return
}

// MockAudioProcessor_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type MockAudioProcessor_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - audioSample []float32
func (_e *MockAudioProcessor_Expecter) Process(audioSample interface{}) *MockAudioProcessor_Process_Call {
	return &MockAudioProcessor_Process_Call{Call: _e.mock.On("Process", audioSample)}
}

func (_c *MockAudioProcessor_Process_Call) Run(run func(audioSample []float32)) *MockAudioProcessor_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []float32
		if args[0] != nil {
			arg0 = args[0].([]float32)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAudioProcessor_Process_Call) Return() *MockAudioProcessor_Process_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAudioProcessor_Process_Call) RunAndReturn(run func(audioSample []float32)) *MockAudioProcessor_Process_Call {
	_c.Run(run)
	return _c
}
