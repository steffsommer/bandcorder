// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"server/internal/pkg/interfaces"

	mock "github.com/stretchr/testify/mock"
)

// NewMockRecordingEventBus creates a new instance of MockRecordingEventBus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRecordingEventBus(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRecordingEventBus {
	mock := &MockRecordingEventBus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRecordingEventBus is an autogenerated mock type for the RecordingEventBus type
type MockRecordingEventBus struct {
	mock.Mock
}

type MockRecordingEventBus_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRecordingEventBus) EXPECT() *MockRecordingEventBus_Expecter {
	return &MockRecordingEventBus_Expecter{mock: &_m.Mock}
}

// NotifyStarted provides a mock function for the type MockRecordingEventBus
func (_mock *MockRecordingEventBus) NotifyStarted(res interfaces.RecordingMetaData) {
	_mock.Called(res)
	return
}

// MockRecordingEventBus_NotifyStarted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyStarted'
type MockRecordingEventBus_NotifyStarted_Call struct {
	*mock.Call
}

// NotifyStarted is a helper method to define mock.On call
//   - res interfaces.RecordingMetaData
func (_e *MockRecordingEventBus_Expecter) NotifyStarted(res interface{}) *MockRecordingEventBus_NotifyStarted_Call {
	return &MockRecordingEventBus_NotifyStarted_Call{Call: _e.mock.On("NotifyStarted", res)}
}

func (_c *MockRecordingEventBus_NotifyStarted_Call) Run(run func(res interfaces.RecordingMetaData)) *MockRecordingEventBus_NotifyStarted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interfaces.RecordingMetaData
		if args[0] != nil {
			arg0 = args[0].(interfaces.RecordingMetaData)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRecordingEventBus_NotifyStarted_Call) Return() *MockRecordingEventBus_NotifyStarted_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRecordingEventBus_NotifyStarted_Call) RunAndReturn(run func(res interfaces.RecordingMetaData)) *MockRecordingEventBus_NotifyStarted_Call {
	_c.Run(run)
	return _c
}

// NotifyStopped provides a mock function for the type MockRecordingEventBus
func (_mock *MockRecordingEventBus) NotifyStopped() {
	_mock.Called()
	return
}

// MockRecordingEventBus_NotifyStopped_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyStopped'
type MockRecordingEventBus_NotifyStopped_Call struct {
	*mock.Call
}

// NotifyStopped is a helper method to define mock.On call
func (_e *MockRecordingEventBus_Expecter) NotifyStopped() *MockRecordingEventBus_NotifyStopped_Call {
	return &MockRecordingEventBus_NotifyStopped_Call{Call: _e.mock.On("NotifyStopped")}
}

func (_c *MockRecordingEventBus_NotifyStopped_Call) Run(run func()) *MockRecordingEventBus_NotifyStopped_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRecordingEventBus_NotifyStopped_Call) Return() *MockRecordingEventBus_NotifyStopped_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRecordingEventBus_NotifyStopped_Call) RunAndReturn(run func()) *MockRecordingEventBus_NotifyStopped_Call {
	_c.Run(run)
	return _c
}
