// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"server/internal/pkg/interfaces"

	mock "github.com/stretchr/testify/mock"
)

// NewMockRecorder creates a new instance of MockRecorder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRecorder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRecorder {
	mock := &MockRecorder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRecorder is an autogenerated mock type for the Recorder type
type MockRecorder struct {
	mock.Mock
}

type MockRecorder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRecorder) EXPECT() *MockRecorder_Expecter {
	return &MockRecorder_Expecter{mock: &_m.Mock}
}

// Abort provides a mock function for the type MockRecorder
func (_mock *MockRecorder) Abort() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Abort")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRecorder_Abort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Abort'
type MockRecorder_Abort_Call struct {
	*mock.Call
}

// Abort is a helper method to define mock.On call
func (_e *MockRecorder_Expecter) Abort() *MockRecorder_Abort_Call {
	return &MockRecorder_Abort_Call{Call: _e.mock.On("Abort")}
}

func (_c *MockRecorder_Abort_Call) Run(run func()) *MockRecorder_Abort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRecorder_Abort_Call) Return(err error) *MockRecorder_Abort_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRecorder_Abort_Call) RunAndReturn(run func() error) *MockRecorder_Abort_Call {
	_c.Call.Return(run)
	return _c
}

// GetMic provides a mock function for the type MockRecorder
func (_mock *MockRecorder) GetMic() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMic")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRecorder_GetMic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMic'
type MockRecorder_GetMic_Call struct {
	*mock.Call
}

// GetMic is a helper method to define mock.On call
func (_e *MockRecorder_Expecter) GetMic() *MockRecorder_GetMic_Call {
	return &MockRecorder_GetMic_Call{Call: _e.mock.On("GetMic")}
}

func (_c *MockRecorder_GetMic_Call) Run(run func()) *MockRecorder_GetMic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRecorder_GetMic_Call) Return(s string, err error) *MockRecorder_GetMic_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockRecorder_GetMic_Call) RunAndReturn(run func() (string, error)) *MockRecorder_GetMic_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockRecorder
func (_mock *MockRecorder) Start() (interfaces.RecordingMetaData, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 interfaces.RecordingMetaData
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (interfaces.RecordingMetaData, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() interfaces.RecordingMetaData); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(interfaces.RecordingMetaData)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRecorder_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockRecorder_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockRecorder_Expecter) Start() *MockRecorder_Start_Call {
	return &MockRecorder_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockRecorder_Start_Call) Run(run func()) *MockRecorder_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRecorder_Start_Call) Return(recordingMetaData interfaces.RecordingMetaData, err error) *MockRecorder_Start_Call {
	_c.Call.Return(recordingMetaData, err)
	return _c
}

func (_c *MockRecorder_Start_Call) RunAndReturn(run func() (interfaces.RecordingMetaData, error)) *MockRecorder_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockRecorder
func (_mock *MockRecorder) Stop() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRecorder_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockRecorder_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockRecorder_Expecter) Stop() *MockRecorder_Stop_Call {
	return &MockRecorder_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockRecorder_Stop_Call) Run(run func()) *MockRecorder_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRecorder_Stop_Call) Return(err error) *MockRecorder_Stop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRecorder_Stop_Call) RunAndReturn(run func() error) *MockRecorder_Stop_Call {
	_c.Call.Return(run)
	return _c
}
