// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"server/internal/pkg/models"
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewMockStorageService creates a new instance of MockStorageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorageService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorageService {
	mock := &MockStorageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStorageService is an autogenerated mock type for the StorageService type
type MockStorageService struct {
	mock.Mock
}

type MockStorageService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorageService) EXPECT() *MockStorageService_Expecter {
	return &MockStorageService_Expecter{mock: &_m.Mock}
}

// GetRecordings provides a mock function for the type MockStorageService
func (_mock *MockStorageService) GetRecordings(date time.Time) ([]models.RecordingInfo, error) {
	ret := _mock.Called(date)

	if len(ret) == 0 {
		panic("no return value specified for GetRecordings")
	}

	var r0 []models.RecordingInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(time.Time) ([]models.RecordingInfo, error)); ok {
		return returnFunc(date)
	}
	if returnFunc, ok := ret.Get(0).(func(time.Time) []models.RecordingInfo); ok {
		r0 = returnFunc(date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.RecordingInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(time.Time) error); ok {
		r1 = returnFunc(date)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorageService_GetRecordings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecordings'
type MockStorageService_GetRecordings_Call struct {
	*mock.Call
}

// GetRecordings is a helper method to define mock.On call
//   - date time.Time
func (_e *MockStorageService_Expecter) GetRecordings(date interface{}) *MockStorageService_GetRecordings_Call {
	return &MockStorageService_GetRecordings_Call{Call: _e.mock.On("GetRecordings", date)}
}

func (_c *MockStorageService_GetRecordings_Call) Run(run func(date time.Time)) *MockStorageService_GetRecordings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 time.Time
		if args[0] != nil {
			arg0 = args[0].(time.Time)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorageService_GetRecordings_Call) Return(recordingInfos []models.RecordingInfo, err error) *MockStorageService_GetRecordings_Call {
	_c.Call.Return(recordingInfos, err)
	return _c
}

func (_c *MockStorageService_GetRecordings_Call) RunAndReturn(run func(date time.Time) ([]models.RecordingInfo, error)) *MockStorageService_GetRecordings_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockStorageService
func (_mock *MockStorageService) Save(fileName string, data []float32) error {
	ret := _mock.Called(fileName, data)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, []float32) error); ok {
		r0 = returnFunc(fileName, data)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorageService_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockStorageService_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - fileName string
//   - data []float32
func (_e *MockStorageService_Expecter) Save(fileName interface{}, data interface{}) *MockStorageService_Save_Call {
	return &MockStorageService_Save_Call{Call: _e.mock.On("Save", fileName, data)}
}

func (_c *MockStorageService_Save_Call) Run(run func(fileName string, data []float32)) *MockStorageService_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []float32
		if args[1] != nil {
			arg1 = args[1].([]float32)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorageService_Save_Call) Return(err error) *MockStorageService_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorageService_Save_Call) RunAndReturn(run func(fileName string, data []float32) error) *MockStorageService_Save_Call {
	_c.Call.Return(run)
	return _c
}
